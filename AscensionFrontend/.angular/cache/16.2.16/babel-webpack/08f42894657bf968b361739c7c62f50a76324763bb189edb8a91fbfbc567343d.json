{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      const storedUser = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(username, password) {\n      // For demo purposes, we're using a dummy login with hardcoded credentials\n      if (username === 'user' && password === 'user') {\n        const user = {\n          id: 1,\n          name: 'Alexis Smith',\n          username: 'user',\n          role: 'nurse'\n        };\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return of(user);\n      } else {\n        return throwError(() => new Error('Invalid username or password'));\n      }\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    isLoggedIn() {\n      return !!this.currentUserValue;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}